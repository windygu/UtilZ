<?xml version="1.0"?>
<doc>
    <assembly>
        <name>UtilZ.DotnetStd.Ex</name>
    </assembly>
    <members>
        <member name="T:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute">
            <summary>
            显示名称特性
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="tag">标识</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="description">描述</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.#ctor(System.String,System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="description">描述</param>
            <param name="tag">标识</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.#ctor(System.String,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="orderIndex">项显示顺序</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.#ctor(System.String,System.Int32,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="orderIndex">项显示顺序</param>
            <param name="description">描述</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.#ctor(System.String,System.Int32,System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="orderIndex">项显示顺序</param>
            <param name="description">描述</param>
            <param name="tag">标识</param>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.OrderIndex">
            <summary>
            项显示顺序
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.Tag">
            <summary>
            获取或设置标识
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.DisplayNameExAttribute.ToString">
            <summary>
            重写ToString方法
            </summary>
            <returns>返回特性文本</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Attributes.TTLVAttribute">
            <summary>
            TTLV特性
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Attributes.TTLVAttribute.Tag">
            <summary>
            标签
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Attributes.TTLVAttribute.ConverterType">
            <summary>
            
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Attributes.TTLVAttribute.PropertyType">
            <summary>
            
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.TTLVAttribute.#ctor(System.Int32,System.Boolean,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="tag">标签</param>
            <param name="propertyType">属性类型[true:单个对象;false;集合(支持类型:IList子类和数组);如果为集合,则属性类型不只能是具体类型,不能是抽象类类型]</param>
            <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.TTLVAttribute.#ctor(System.Int32,System.Type,System.Object[],System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tag">标签</param>
            <param name="converterType">属性值转换器类型[该类型必须实现ITTLVConverter接口,且有无参构造函数]</param>
            <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null</param>
            <param name="converterPara">转换器参数</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Attributes.TTLVAttribute.#ctor(System.Int32,System.Type,UtilZ.DotnetStd.Ex.Attributes.TTLVPropertyType,System.Object[],System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="tag">标签</param>
            <param name="converterType">属性值转换器类型[该类型必须实现ITTLVConverter接口,且有无参构造函数]</param>
            <param name="propertyType">属性类型[如果为Collection]</param>
            <param name="index">索引化属性的可选索引值。对于非索引化属性，此值应为 null</param>
            <param name="converterPara">转换器参数</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Attributes.TTLVPropertyType">
            <summary>
            数据类型
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Attributes.TTLVPropertyType.SingleObject">
            <summary>
            单对象
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Attributes.TTLVPropertyType.Collection">
            <summary>
            集合(仅支持类型,IList子类和数组)
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Attributes.TTLVPropertyType.Converter">
            <summary>
            自定义转换器
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.ApplicationEx">
            <summary>
            应用程序辅助类,控制台程序正常结束需要手动调用ApplicationHelper.OnRaiseApplicationExitNotify方法
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ApplicationEx.RaiseApplicationExitNotify">
            <summary>
            触发应用程序结束通知
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ApplicationEx.Add(UtilZ.DotnetStd.Ex.Base.ApplicationExitNotify)">
            <summary>
            添加应用程序退出通知
            </summary>
            <param name="applicationExitNotify"></param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ApplicationEx.Remove(UtilZ.DotnetStd.Ex.Base.ApplicationExitNotify)">
            <summary>
            移除应用程序退出通知
            </summary>
            <param name="applicationExitNotify"></param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ApplicationEx.Clear">
            <summary>
            清空应用程序退出通知
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.ApplicationExitNotify">
            <summary>
            应用程序退出通知
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ApplicationExitNotify._exitNotifyCallback">
            <summary>
            结束通知回调
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ApplicationExitNotify.OnRaiseApplicationExitNotify">
            <summary>
            触发应用程序结束通知
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ApplicationExitNotify.#ctor(System.Action)">
            <summary>
            构造函数 
            </summary>
            <param name="exitNotifyCallback">结束通知回调</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.AsynQueue`1">
            <summary>
            异步队列
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._thread">
            <summary>
            异步队列线程
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._threadMonitor">
            <summary>
            线程操作监视锁
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._cts">
            <summary>
            线程取消通知对象
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._isBackground">
            <summary>
            是否是后台线程[true:后台线程，false:前台线程]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._queue">
            <summary>
            Queue
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._emptyQueueWaitEventHandle">
            <summary>
            空队列等待线程消息通知
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._emptyQueueWaitTimeout">
            <summary>
            空队列等待超时时间
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._stopAutoResetEvent">
            <summary>
            停止线程消息通知
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._isDisposed">
            <summary>
            对象是否已释放[true:已释放;false:未释放]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._threadName">
            <summary>
            异步队列线程名称
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.ThreadName">
            <summary>
            异步队列线程名称
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._status">
            <summary>
            队列线程状态[true:线程正在运行;false:线程未运行]
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.Status">
            <summary>
            获取队列线程状态[true:线程正在运行;false:线程未运行]
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.Capity">
            <summary>
            获取队列容量[如果设置的容量小于当前已有队列长度,则丢弃掉队列头的项.直到队列长度与目标容量一致]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._isDequeueMuiltItem">
            <summary>
            是否每次抛出多项
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._batchCount">
            <summary>
            批量处理最大项数
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1._millisecondsTimeout">
            <summary>
            当队列中的项数少于批量处理最大项数时的等待时间,单位毫秒
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.ProcessAction">
            <summary>
            数据处理委托
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.OnRaiseProcess(`0)">
            <summary>
            数据处理
            </summary>
            <param name="item">待处理数据项</param>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.ProcessAction2">
            <summary>
            数据处理委托
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.OnRaiseProcessAction2(System.Collections.Generic.List{`0})">
            <summary>
            调用数据处理委托
            </summary>
            <param name="items"></param>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.SyncRoot">
            <summary>
            同步操作对象
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.#ctor(System.Boolean,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="isDequeueMuiltItem">是否每次抛出多项</param>
            <param name="threadName">异步队列线程名称</param>
            <param name="isBackground">是否是后台线程[true:后台线程，false:前台线程]</param>
            <param name="isAutoStart">是否自动启动线程</param>
            <param name="capcity">队列容量</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.#ctor(System.Action{`0},System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="processAction">数据处理委托</param>
            <param name="threadName">异步队列线程名称</param>
            <param name="isBackground">是否是后台线程[true:后台线程，false:前台线程]</param>
            <param name="isAutoStart">是否自动启动线程</param>
            <param name="capcity">队列容量</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.#ctor(System.Action{System.Collections.Generic.List{`0}},System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="processAction">数据处理委托</param>
            <param name="batchCount">批量处理最大项数</param>
            <param name="millisecondsTimeout">当队列中的项数少于批量处理最大项数时的等待时间,单位毫秒</param>
            <param name="threadName">异步队列线程名称</param>
            <param name="isBackground">是否是后台线程[true:后台线程，false:前台线程]</param>
            <param name="isAutoStart">是否自动启动线程</param>
            <param name="capcity">队列容量</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.Start(System.Threading.ApartmentState)">
            <summary>
            启动子类无参数工作线程
            </summary>
            <param name="apartmentState">指定的单元状态 System.Threading.Thread</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.Stop(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            停止工作线程
            </summary>       
            <param name="isAbort">是否立即终止处理方法[true:立即终止;false:等待方法执行完成;默认false]</param>
            <param name="isSync">是否同步停止[true:同步停止;false:异常停止];注:注意线程死锁,典型场景:刷新UI,在UI上执行同步停止</param>
            <param name="synMillisecondsTimeout">同步超时时间,-1表示无限期等待,单位/毫秒[isSycn为true时有效]</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.PrimitiveStop(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            停止工作线程
            </summary>       
            <param name="isAbort">是否立即终止处理方法[true:立即终止;false:等待方法执行完成;默认false]</param>
            <param name="isSync">是否同步停止[true:同步停止;false:异常停止];注:注意线程死锁,典型场景:刷新UI,在UI上执行同步停止</param>
            <param name="synMillisecondsTimeout">同步超时时间,-1表示无限期等待,单位/毫秒[isSycn为true时有效]</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.RunThreadQueueProcessMethod(System.Object)">
            <summary>
            线程队列处理方法
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.RunThreadQueueSingleProcessMethod(System.Threading.CancellationToken)">
            <summary>
            线程队列处理方法
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.RunThreadQueueMuiltProcessMethod(System.Threading.CancellationToken)">
            <summary>
            线程队列处理方法
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.Enqueue(`0)">
            <summary>
            将对象添加到队列的结尾处
            </summary>
            <param name="item">待添加的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.Remove(System.Int32)">
            <summary>
            移除位于开始处的指定个数对象
            </summary>
            <param name="count">要移除的项数</param>
            <returns>移除项集合</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
            移除满足条件的元素
            </summary>
            <param name="predicate">用于定义要移除的元素应满足的条件</param>
            <returns>移除项集合</returns>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.Count">
            <summary>
            获取队列中包含的元素数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.ToArray">
            <summary>
            将队列中存储的元素复制到新数组中
            </summary>
            <returns>新数组</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.Clear">
            <summary>
            清空队列,必须在停止时执行,否则后果未知
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.AsynQueue`1.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDispose">是否释放标识</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.EnumEx">
            <summary>
            枚举辅助类
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.AssertEnum``1">
            <summary>
            断言类型T为枚举类型
            </summary>
            <typeparam name="T">类型T</typeparam>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.AssertEnum(System.Type)">
            <summary>
            断言类型T为枚举类型
            </summary>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.GetEnumByDisplayNameExAttributeDisplayName(System.Type,System.String)">
            <summary>
            根据枚举DisplayNameExAttribute特性文本获取对应的枚举项
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="displayName">显示文本</param>
            <returns>枚举项</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.GetDisplayNameExAttributeItemList(System.Type)">
            <summary>
            获取枚举特性转换成的DropdownBindingItem列表
            </summary>
            <param name="enumType">枚举类型</param>
            <returns>绑定列表集合</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.GetEnumItemAttribute``2">
            <summary>
            获取枚举特性转换成的字典集合[key:枚举值;value:枚举项上标记的特性(多项取第一项)]
            </summary>
            <typeparam name="ET">枚举类型</typeparam>
            <typeparam name="AT">枚举上对应的特性类型</typeparam>
            <returns>枚举特性转换成的字典集合</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.GetEnumItemDisplayName(System.Object)">
            <summary>
            获取枚举项上的特性显示文本
            </summary>
            <param name="enumItem">枚举值</param>
            <returns>特性显示文本</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.GetEnumItemDisplayName``1(``0)">
            <summary>
            获取枚举项上的特性显示文本
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumItem">枚举值</param>
            <returns>特性显示文本</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.PrimitiveGetEnumItemDisplayName(System.Type,System.Object)">
            <summary>
            获取枚举项上的显示文本
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="enumItem">枚举项</param>
            <returns>显示文本</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.GetEnumItemTag(System.Object)">
            <summary>
            获取枚举项上的标识
            </summary>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.GetEnumItemTag``1(``0)">
            <summary>
            获取枚举项上的标识
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.PrimitiveGetEnumItemTag(System.Type,System.Object)">
            <summary>
            获取枚举项上的标识
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.GetEnumItemDescription(System.Object)">
            <summary>
            获取枚举项上的描述
            </summary>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.GetEnumItemDescription``1(``0)">
            <summary>
            获取枚举项上的描述
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.PrimitiveGetEnumItemDescription(System.Type,System.Object)">
            <summary>
            获取枚举项上的描述
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="enumItem">枚举值</param>
            <returns>枚举项上的标识</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.GetEnumItemDisplayNameExAttribute(System.Object)">
            <summary>
            获取枚举项上的特性
            </summary>
            <param name="enumItem">枚举值</param>
            <returns>特性</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.GetEnumItemDisplayNameExAttribute``1(``0)">
            <summary>
            获取枚举项上的特性
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="enumItem">枚举值</param>
            <returns>特性显示文本</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.EnumEx.PrimitiveGetEnumItemDisplayNameExAttribute(System.Type,System.Object)">
            <summary>
            获取枚举项上的特性
            </summary>
            <param name="enumType">枚举类型</param>
            <param name="enumItem">枚举项</param>
            <returns>显示文本</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.MathEx.AngleToRadians(System.Double)">
            <summary>
            角度转换为弧度
            </summary>
            <param name="angle">角度</param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.MathEx.RadiansToAngle(System.Double)">
            <summary>
            弧度转换为角度
            </summary>
            <param name="radians">弧度</param>
            <returns></returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.BaseModelAbs">
            <summary>
            模型基类
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.BaseModelAbs.OnRaisePropertyChanged(System.String)">
            <summary>
            触发属性值改变事件
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.BaseModelAbs.OnRaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            触发属性值改变事件
            </summary>
            <param name="propertyName">属性名</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.BaseModelAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem">
            <summary>
            UI显示基类
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem.DisplayName">
            <summary>
            获取或设置显示名称
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem.Description">
            <summary>
            获取或设置描述
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem.Value">
            <summary>
            获取或设置值
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem.Tag">
            <summary>
            数据标识
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="value">值</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem.#ctor(System.String,System.Object,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="value">值</param>
            <param name="description">项描述</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem.#ctor(System.String,System.Object,System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="displayName">显示文本</param>
            <param name="value">值</param>
            <param name="description">项描述</param>
            <param name="tag">数据标识</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem.ToString">
            <summary>
            重写ToString
            </summary>
            <returns>下拉框显示文本</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem.GenericToDropdownBindingItems``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            转换泛型集合为DropdownBindingItem列表
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="srcItems">原始泛型集合</param>
            <param name="displayMember">显示的成员,属性名或字段名,当为null时调用成员的ToString方法的值作为显示值[默认值为null]</param>
            <returns>DropdownBindingItem列表</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.DropdownBindingItem.GenericToDropdownBindingItems``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String})">
            <summary>
            转换泛型集合为DropdownBindingItem列表
            </summary>
            <typeparam name="T">泛型类型</typeparam>
            <param name="srcItems">原始泛型集合</param>
            <param name="displayFun">显示转换委托</param>
            <returns>DropdownBindingItem列表</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.TEventArgs`1">
            <summary>
            泛型事件参数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.TEventArgs`1.#ctor(`0)">
            <summary>
            构造函数
            </summary>
            <param name="args">参数</param>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.TEventArgs`1.Args">
            <summary>
            获取参数
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.TKeyTValue`2">
            <summary>
            泛型键值类
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.TKeyTValue`2.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.TKeyTValue`2.#ctor(`0,`1)">
            <summary>
            构造函数
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.TKeyTValue`2.Key">
            <summary>
            获取或设置键
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.TKeyTValue`2.Value">
            <summary>
            获取或设置值
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.ThreadEx">
            <summary>
            线程扩展类
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadEx._action">
            <summary>
            线程要执行的委托,无参数
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadEx._actionObj">
            <summary>
            线程要执行的委托,带参数
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadEx._flag">
            <summary>
            true:无参数;false:带参数
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadEx._name">
            <summary>
            线程名称
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadEx._isBackground">
            <summary>
            是否后台运行[true:后台线程;false:前台线程]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadEx._threadLock">
            <summary>
            外部调用线程锁
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadEx._thread">
            <summary>
            执行线程
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.ThreadEx.OwnerThread">
            <summary>
            获取内部线程
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadEx._runing">
            <summary>
            当前线程是否正在运行[true:正在运行;false:未运行]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadEx._threadStartPara">
             <summary>
            线程参数
             </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.#ctor(System.Boolean,System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="flag">true:无参数;false:带参数</param>
            <param name="name">线程名称</param>
            <param name="isBackground">是否后台运行[true:后台线程;false:前台线程]</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.#ctor(System.Action{System.Threading.CancellationToken},System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="action">线程要执行的委托</param>
            <param name="name">线程名称</param>
            <param name="isBackground">后台运行标识[true:后台线程;false:前台线程]</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.#ctor(System.Action{System.Threading.CancellationToken,System.Object},System.String,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="action">线程要执行的委托</param>
            <param name="name">线程名称</param>
            <param name="isBackground">后台运行标识[true:后台线程;false:前台线程]</param>
        </member>
        <member name="E:UtilZ.DotnetStd.Ex.Base.ThreadEx.Completed">
            <summary>
            线程执行完成事件
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.OnRaiseCompleted(UtilZ.DotnetStd.Ex.Base.ThreadExCompletedType,System.Exception)">
            <summary>
            触发线程执行完成事件
            </summary>
            <param name="type">线程执行完成类型</param>
            <param name="ex">当执行异常可取消时可能的异常信息</param>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.ThreadEx.ThreadState">
            <summary>
            获取线程当前的状态
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.ThreadEx.ManagedThreadId">
            <summary>
            获取当前托管线程的唯一标识符
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.ThreadEx.IsRuning">
            <summary>
            当前线程是否正在运行
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.Start(System.Object,System.Threading.ApartmentState)">
            <summary>
            启动线程
            </summary>
            <param name="obj">线程启动参数</param>
            <param name="apartmentState">指定的单元状态 System.Threading.Thread</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.ThreadExcuteMethod(System.Object)">
            <summary>
            线程执行方法
            </summary>
            <param name="obj">线程参数</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.Stop(System.Boolean,System.Int32)">
            <summary>
            停止线程
            </summary>
            <param name="sycn">是否同步调用停止方法,同步调用会等线程结束后才退出本方法[true:同步;false:异步]</param>
            <param name="synMillisecondsTimeout">同步超时时间,-1表示无限期等待,单位/毫秒[isSycn为true时有效]</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.Abort(System.Object)">
            <summary>
            终止线程
            </summary>
            <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.Start(System.Action{System.Threading.CancellationToken},System.String,System.Boolean)">
            <summary>
            创建线程对象
            </summary>
            <param name="action">线程要执行的委托</param>
            <param name="name">线程名称</param>
            <param name="isBackground">是否后台运行[true:后台线程;false:前台线程]</param>
            <returns>返回线程对象</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.Start(System.Action{System.Threading.CancellationToken,System.Object},System.Object,System.String,System.Boolean)">
            <summary>
            创建线程对象
            </summary>
            <param name="action">线程要执行的委托</param>
            <param name="obj">线程启动参数</param>
            <param name="name">线程名称</param>
            <param name="isBackground">是否后台运行[true:后台线程;false:前台线程]</param>
            <returns>返回线程对象</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.AssignCoreRun(System.Int32,System.Int32,System.Int32)">
            <summary>
            .net方式指定当前线程运行在指定CPU核心上[多个核心间切换运行,不像win32方式是在一个核心上运行]
            </summary>
            <param name="threadID">线程ID</param>
            <param name="idealProcessor">首选处理器</param>
            <param name="coreID">目标处理器(Power(2,0-4]之间的单值或或位运算值)</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadEx.SetThreadIsBackground(System.Threading.Thread,System.Boolean)">
            <summary>
            设置线程是否为后台线程
            </summary>
            <param name="thread">要设置的线程</param>
            <param name="isBackground">true:后台线程;false:前台线程</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.IThreadEx">
            <summary>
            扩展线程接口
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.IThreadEx.OwnerThread">
            <summary>
            获取内部线程
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.IThreadEx.Start(System.Object,System.Threading.ApartmentState)">
            <summary>
            启动线程
            </summary>
            <param name="obj">线程启动参数</param>
            <param name="apartmentState">指定的单元状态 System.Threading.Thread</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.IThreadEx.Stop(System.Boolean,System.Int32)">
            <summary>
            停止线程
            </summary>
            <param name="isSycn">是否同步调用停止方法,同步调用会等线程结束后才退出本方法[true:同步;false:异步]</param>
            <param name="synMillisecondsTimeout">同步超时时间,-1表示无限期等待,单位/毫秒</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.IThreadEx.Abort(System.Object)">
            <summary>
            终止线程
            </summary>
            <param name="stateInfo">An object that contains application-specific information, such as state, which can be used by the thread being aborted</param>
        </member>
        <member name="E:UtilZ.DotnetStd.Ex.Base.IThreadEx.Completed">
            <summary>
            线程执行完成事件
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.IThreadEx.ThreadState">
            <summary>
            获取线程当前的状态
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.IThreadEx.ManagedThreadId">
            <summary>
            获取当前托管线程的唯一标识符
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.IThreadEx.IsRuning">
            <summary>
            当前线程是否正在运行
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.ThreadExCompletedArgs">
            <summary>
            线程执行完成事件参数
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.ThreadExCompletedArgs.Type">
            <summary>
            线程执行完成类型
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.ThreadExCompletedArgs.Exception">
            <summary>
            当执行异常可取消时可能的异常信息
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.ThreadExCompletedArgs.#ctor(UtilZ.DotnetStd.Ex.Base.ThreadExCompletedType,System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="type">线程执行完成类型</param>
            <param name="ex">当执行异常可取消时可能的异常信息</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.ThreadExCompletedType">
            <summary>
            线程执行完成类型
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadExCompletedType.Completed">
            <summary>
            完成
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadExCompletedType.Exception">
            <summary>
            异常
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.ThreadExCompletedType.Cancel">
            <summary>
            取消
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.TimeEx">
            <summary>
            时间扩展类
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.TimeEx.GetTimestamp(System.Boolean)">
            <summary>
            获取当前时间的时间戳
            </summary>
            <param name="utc">是否使用utc时间[true:utc时间;false:本机时间]</param>
            <returns>当前时间的时间戳</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.TimeEx.DateTimeToTimestamp(System.DateTime)">
            <summary>
            日期时间转换为时间戳
            </summary>
            <param name="datetime">指定日期时间</param>
            <returns>当前时间的时间戳</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.TimeEx.TimestampToDateTime(System.Int64)">
            <summary>
            时间戳转换为日期时间
            </summary>
            <param name="timestamp">时间戳</param>
            <returns>时间</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Base.TimeoutBase">
            <summary>
            超时基类
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.TimeoutBase._millisecondsTimeout">
            <summary>
            超时时长,单位毫秒
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.TimeoutBase.MillisecondsTimeout">
            <summary>
            获取超时时长,单位毫秒
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Base.TimeoutBase._lastAccessTimestamp">
            <summary>
            最后一次访问时间戳
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Base.TimeoutBase.LastAccessTimestamp">
            <summary>
            获取最后一次访问时间戳
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.TimeoutBase.#ctor(System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="millisecondsTimeout">超时时长,单位毫秒</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.TimeoutBase.UpdateLastAccessTimestamp">
            <summary>
            更新访问时间戳
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Base.TimeoutBase.IsTimeout">
            <summary>
            是否超时
            </summary>
            <returns></returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.ITTLVConverter">
            <summary>
            TTLV属性值编解码转换接口
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.ITTLVConverter.ConvertToBytes(System.Int32,System.Object,System.Type,System.Object)">
            <summary>
            目标对象转换为bytes
            </summary>
            <param name="tag">标签</param>
            <param name="obj">转换对象</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.ITTLVConverter.ConvertBackObject(System.Int32,System.Byte[],System.Object,System.Type,System.Object)">
            <summary>
            转换bytes到目标对象
            </summary>
            <param name="tag">标签</param>
            <param name="buffer">byte[]</param>
            <param name="memberValue">目标属性或字段值</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>解析结果对象</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.ITTLVNodeCodec">
            <summary>
            TTLV编解码接口
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.ITTLVNodeCodec.WriteNode(System.Collections.Generic.List{System.Byte},System.Int32,System.TypeCode,System.Byte[])">
            <summary>
            顺序编码节点数据
            </summary>
            <param name="buffer">存储数据列表</param>
            <param name="tag">Tag</param>
            <param name="typeCode">Type</param>
            <param name="valueBuffer">Value</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.ITTLVNodeCodec.ReadNodeInfo(System.IO.BinaryReader,UtilZ.DotnetStd.Ex.TTLV.TTLVNodeInfo)">
            <summary>
            读取节点信息
            </summary>
            <param name="br">BinaryReader</param>
            <param name="nodeInfo">存储节点信息对象</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.TTLVCommon">
            <summary>
            TTLVCommon
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVCommon.GetConvertTypeLength(System.TypeCode)">
            <summary>
            获取转换类型bytes长度
            </summary>
            <param name="typeCode"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVCommon.ConvertToBytes(System.TypeCode,System.Object)">
            <summary>
            获取基元类型数据转换为Bytes
            </summary>
            <param name="typeCode">TypeCode</param>
            <param name="objValue">object</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVCommon.ConvterBack(System.Byte[],System.TypeCode,System.Int32,System.Int32)">
            <summary>
            获取byte[]转换为基元类型数据
            </summary>
            <param name="valueBuffer"></param>
            <param name="typeCode"></param>
            <param name="startIndex"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVCommon.CheckHasNoParaConstructor(System.Type)">
            <summary>
            判断是否有无参构造函数,且可反射调用无参构造函数实例化对象
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVCommon.GetCollectionElementType(System.Type,System.Type@,UtilZ.DotnetStd.Ex.TTLV.TTLVType@)">
            <summary>
            
            </summary>
            <param name="collectionType"></param>
            <param name="eleType"></param>
            <param name="ttlvType"></param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.TTLVConverterBase">
            <summary>
            TTLV属性或字段值序列化编解码转换接口
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVConverterBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVConverterBase.ConvertToBytes(System.Int32,System.Object,System.Type,System.Object)">
            <summary>
            目标对象转换为bytes
            </summary>
            <param name="tag">标签</param>
            <param name="obj">转换对象</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVConverterBase.ConvertBackObject(System.Int32,System.Byte[],System.Object,System.Type,System.Object)">
            <summary>
            转换bytes到目标对象
            </summary>
            <param name="tag">标签</param>
            <param name="buffer">byte[]</param>
            <param name="memberValue">目标属性或字段值</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>解析结果对象</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.StuTTLVConvter.ConvertToBytes(System.Int32,System.Object,System.Type,System.Object)">
            <summary>
            目标对象转换为bytes
            </summary>
            <param name="tag">标签</param>
            <param name="obj">转换对象</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.StuTTLVConvter.ConvertBackObject(System.Int32,System.Byte[],System.Object,System.Type,System.Object)">
            <summary>
            转换bytes到目标对象
            </summary>
            <param name="tag">标签</param>
            <param name="buffer">byte[]</param>
            <param name="memberValue">目标属性或字段值</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>解析结果对象</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.CommandBase">
            <summary>
            命令基类[TTLV_Tag范围(0-100)]
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.TTLV.CommandBase.Cmd">
            <summary>
            命令字
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.CommandBase.GenerateCommandData">
            <summary>
            生成命令数据
            </summary>
            <returns>命令数据</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.CommandBase.Parse(System.Byte[])">
            <summary>
            解析命令数据
            </summary>
            <param name="data">传输命令</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.CommandBaseT`1">
            <summary>
            泛型命令基类
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.TTLVHelper">
            <summary>
            TTVL辅助类[编码规则:Tag:4字节;Type:1字节;Length:4字节;Value:bytes]
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVHelper.SetNodeCodec(UtilZ.DotnetStd.Ex.TTLV.ITTLVNodeCodec)">
            <summary>
            设置节点编解码器
            </summary>
            <param name="codec">节点编解码器</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVHelper.Test">
            <summary>
            测试
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVHelper.Decoding``1(System.Byte[],System.Int32,System.Int32)">
            <summary>
            解析数据[支持类和结构体]
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="buffer">要解析的bytes</param>
            <param name="beginIndex">解析数据起始索引(小于0表示从头开始)</param>
            <param name="length">解析数据长度(小于0表示从起始到末尾)</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVHelper.Decoding``1(``0,System.Byte[],System.Int32,System.Int32)">
            <summary>
            解析数据到指定对象体中
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="obj">数据存储对象</param>
            <param name="buffer">要解析的bytes</param>
            <param name="beginIndex">解析数据起始索引(小于0表示从头开始)</param>
            <param name="length">解析数据长度(小于0表示从起始到末尾)</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVHelper.Decoding``1(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            解析数据[支持类和结构体]
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="stream">要解析的数据流</param>
            <param name="position">流解析起始位置(小于0表示从头开始)</param>
            <param name="endPosition">流解析结束位置(小于0表示从起始到末尾)</param>
            <returns>解析结果</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVHelper.Decoding``1(``0,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            解析数据到指定对象体中
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="obj">数据存储对象</param>
            <param name="stream">要解析的数据流</param>
            <param name="position">流解析起始位置(小于0表示从头开始)</param>
            <param name="endPosition">流解析结束位置(小于0表示从起始到末尾)</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVHelper.Decoding``1(``0,System.IO.BinaryReader,System.Int64,System.Int64)">
            <summary>
            解析数据到指定对象体中
            </summary>
            <typeparam name="T">目标数据类型</typeparam>
            <param name="obj">数据存储对象</param>
            <param name="br">BinaryReader</param>
            <param name="position">流解析起始位置(小于0表示从头开始)</param>
            <param name="endPosition">流解析结束位置(小于0表示从起始到末尾)</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVHelper.Encoding(System.Object)">
            <summary>
            转换为bytes
            </summary>
            <param name="obj">目标对象</param>
            <returns>转换结果bytes</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVNodeCodec.WriteNode(System.Collections.Generic.List{System.Byte},System.Int32,System.TypeCode,System.Byte[])">
            <summary>
            顺序编码节点数据
            </summary>
            <param name="buffer">存储数据列表</param>
            <param name="tag">Tag</param>
            <param name="typeCode">Type</param>
            <param name="valueBuffer">Value</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVNodeCodec.ReadNodeInfo(System.IO.BinaryReader,UtilZ.DotnetStd.Ex.TTLV.TTLVNodeInfo)">
            <summary>
            读取节点信息
            </summary>
            <param name="br">BinaryReader</param>
            <param name="nodeInfo">存储节点信息对象</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.TTLVNodeInfo">
            <summary>
            TTLV节点信息
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.TTLV.TTLVNodeInfo.Tag">
            <summary>
            节点Tag
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.TTLV.TTLVNodeInfo.Type">
            <summary>
            节点值类型
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.TTLV.TTLVNodeInfo.Length">
            <summary>
            节点值数据长度
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVNodeInfo.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.TTLVPrimitiveCollectionConverter">
            <summary>
            基元类型集合(包括非基元类型的字符串集合)TTLV属性值编解码转换接口
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVPrimitiveCollectionConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVPrimitiveCollectionConverter.ConvertToBytes(System.Int32,System.Object,System.Type,System.Object)">
            <summary>
            目标对象转换为bytes
            </summary>
            <param name="tag">标签</param>
            <param name="obj">转换对象</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVPrimitiveCollectionConverter.ConvertBackObject(System.Int32,System.Byte[],System.Object,System.Type,System.Object)">
            <summary>
            转换bytes到目标对象
            </summary>
            <param name="tag">标签</param>
            <param name="buffer">byte[]</param>
            <param name="memberValue">目标属性或字段值</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>解析结果对象</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.TTLVSerializeConverter">
            <summary>
            TTLV属性或字段值序列化编解码转换接口
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVSerializeConverter.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVSerializeConverter.ConvertToBytes(System.Int32,System.Object,System.Type,System.Object)">
            <summary>
            目标对象转换为bytes
            </summary>
            <param name="tag">标签</param>
            <param name="obj">转换对象</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>转换结果</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.TTLV.TTLVSerializeConverter.ConvertBackObject(System.Int32,System.Byte[],System.Object,System.Type,System.Object)">
            <summary>
            转换bytes到目标对象
            </summary>
            <param name="tag">标签</param>
            <param name="buffer">byte[]</param>
            <param name="memberValue">目标属性或字段值</param>
            <param name="targetType">目标属性或字段类型</param>
            <param name="converterPara">转换器参数</param>
            <returns>解析结果对象</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.TTLVSerializeType">
            <summary>
            TTLVSerializeConverter序列化类型
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.TTLV.TTLVSerializeType.Json">
            <summary>
            Json
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.TTLV.TTLVSerializeType.Xml">
            <summary>
            Xml,目标类型需要标记为可序列化,且类型必须是public类型
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.TTLV.TTLVSerializeType.Bin">
            <summary>
            二进制,目标类型需要标记为可序列化
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.TTLVStructNode">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.TTLV.TTLVStructNode._memberType">
            <summary>
            成员类型[true:属性;false:字段]
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.TTLV.TTLVType">
            <summary>
            TTLVType
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.TTLV.TTLVType.BasicType">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.TTLV.TTLVType.Convert">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.TTLV.TTLVType.Object">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.TTLV.TTLVType.Array">
            <summary>
            
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.TTLV.TTLVType.IList">
            <summary>
            
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.ValueNameMap.CustomerValueNameAbs">
            <summary>
            值名称获取自定义基类
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.CustomerValueNameAbs.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.CustomerValueNameAbs.GetName(System.Object,UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameDictionary)">
            <summary>
            获取值对应的名称
            </summary>
            <param name="value">值</param>
            <param name="dic">值名称映射字典集合</param>
            <returns>值对应的名称</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.CustomerValueNameAbs.PrimitiveGetName(System.Object,UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameDictionary)">
            <summary>
            获取值对应的名称
            </summary>
            <param name="value">值</param>
            <param name="dic">值名称映射字典集合</param>
            <returns>值对应的名称</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.ValueNameMap.DefaultCustomerValueName">
            <summary>
            默认值名称获取自定义类
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.DefaultCustomerValueName.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.DefaultCustomerValueName.#ctor(System.Func{System.Object,UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameDictionary,System.String})">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.DefaultCustomerValueName.PrimitiveGetName(System.Object,UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameDictionary)">
            <summary>
            获取值对应的名称
            </summary>
            <param name="value">值</param>
            <param name="dic">值名称映射字典集合</param>
            <returns>值对应的名称</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.ValueNameMap.ICustomerValueName">
            <summary>
            值名称获取自定义接口
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ICustomerValueName.GetName(System.Object,UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameDictionary)">
            <summary>
            获取值对应的名称
            </summary>
            <param name="value">值</param>
            <param name="dic">值名称映射字典集合</param>
            <returns>值对应的名称</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameDictionary">
            <summary>
            值名称映射字典
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameDictionary.ValueNameMapTypeAttribute">
            <summary>
            值名称映射类型特性
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameDictionary.#ctor(UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapTypeAttribute)">
            <summary>
            构造函数
            </summary>
            <param name="valueNameMapTypeAttribute">值名称映射类型特性</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapFieldAttribute">
            <summary>
            常量字段值名称映射特性
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapFieldAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapFieldAttribute.#ctor(System.String)">
            <summary>
            构造函数 
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager">
            <summary>
            值名称映射管理类
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager.RegisteType``1">
            <summary>
            注册常量类
            </summary>
            <typeparam name="T">目标类型</typeparam>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager.RegisteType``1(UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameDictionary)">
            <summary>
            注册常量类
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="valueNameDic">值名称字典集合</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager.RegisteType(System.Type,UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameDictionary)">
            <summary>
            注册指定类型的值名称映射
            </summary>
            <param name="type">目标类型</param>
            <param name="valueNameDic">值名称字典集合</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager.GetValueNameDictionary``1">
            <summary>
            获取指定类型的值名称映射字典集合
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <returns>值名称映射字典集合</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager.GetValueNameDictionary(System.Type)">
            <summary>
            获取指定类型的值名称映射字典集合
            </summary>
            <param name="type">目标类型</param>
            <returns>值名称映射字典集合</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager.Remove``1">
            <summary>
            移除指定类型的映射
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <returns>移除的值名称映射集合</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager.Clear``1">
            <summary>
            清空映射所有映射
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager.GetNameByValue``1(System.Object)">
            <summary>
            根据值获取名称
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="value">值</param>
            <returns>名称</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager.GerValueByName``1(System.String)">
            <summary>
            根据名称获取值
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="name">名称</param>
            <returns>值</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager.GetValues``1">
            <summary>
            获取指定类型值数组
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <returns>类型所有定义常量值数组</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapManager.GetNames``1">
            <summary>
            获取指定类型名称数组
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <returns>类型所有定义常量值数组</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapTypeAttribute">
            <summary>
            值名称映射类型特性
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapTypeAttribute.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapTypeAttribute.CustomerValueName">
            <summary>
            自定义值名称获取接口
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapTypeAttribute.#ctor(System.String)">
            <summary>
            构造函数 
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.ValueNameMap.ValueNameMapTypeAttribute.#ctor(System.String,System.Type)">
            <summary>
            构造函数
            </summary>
            <param name="name"></param>
            <param name="customerValueNameType"></param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase">
            <summary>
            日志追加器基类
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.Name">
            <summary>
            日志追加器名称
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase._config">
            <summary>
            配置对象
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.Config">
            <summary>
            获取配置对象
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase._logWriteQueue">
            <summary>
            日志写线程队列
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.#ctor(UtilZ.DotnetStd.Ex.Log.Config.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.PrimitiveWriteLog(UtilZ.DotnetStd.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.WriteLog(UtilZ.DotnetStd.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.Validate(UtilZ.DotnetStd.Ex.Log.Config.BaseConfig,UtilZ.DotnetStd.Ex.Log.LogItem)">
            <summary>
            验证日志是否允许输出[返回值true:允许输出;false:丢弃]
            </summary>
            <param name="config">配置</param>
            <param name="item">要验证输出的日志项</param>
            <returns>true:允许输出;false:丢弃</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.LayoutLog(UtilZ.DotnetStd.Ex.Log.LogItem)">
            <summary>
            布局一条日志文本记录
            </summary>
            <param name="item">日志信息对象</param>
            <returns>日志文本记录</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.ToString">
            <summary>
            重写ToString
            </summary>
            <returns></returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.Finalize">
            <summary>
            构造函数释放非托管资源
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing">释放资源标识</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Appender.ConsoleAppender">
            <summary>
            控制台日志输出追加器
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.ConsoleAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.ConsoleAppender.#ctor(UtilZ.DotnetStd.Ex.Log.Config.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.ConsoleAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.ConsoleAppender.PrimitiveWriteLog(UtilZ.DotnetStd.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Appender.DatabaseAppender">
            <summary>
            数据库日志输出追加器
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.DatabaseAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.DatabaseAppender.#ctor(UtilZ.DotnetStd.Ex.Log.Config.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.DatabaseAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.DatabaseAppender.PrimitiveWriteLog(UtilZ.DotnetStd.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Appender.FileAppender">
            <summary>
            文件日志追加器
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.FileAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.FileAppender.#ctor(UtilZ.DotnetStd.Ex.Log.Config.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.FileAppender.Init">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.FileAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.FileAppender.PrimitiveWriteLog(UtilZ.DotnetStd.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.FileAppenderFixFileNameBuilder.CheckPath(System.String,System.DateTime@)">
            <summary>
            检查日志文件路径是否是有效路径[有效返回true;无效返回false]
            </summary>
            <param name="filePath"></param>
            <param name="createTime"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.FileAppenderPathBuilderBase.CheckPath(System.String,System.DateTime@)">
            <summary>
            检查日志文件路径是否是有效路径[有效返回true;无效返回false]
            </summary>
            <param name="filePath"></param>
            <param name="createTime"></param>
            <returns></returns>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.Appender.FileAppenderPathItem._isRealCreatePath">
            <summary>
            当前路径项是否是需要实时创建的路径[true:需要实时创建;false:固定路径]
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.FileAppenderPathItem.CheckPath(System.String,System.DateTime@)">
            <summary>
            检查日志文件路径是否是有效路径[有效返回true;无效返回false]
            </summary>
            <param name="path"></param>
            <param name="createTime"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.FileAppenderVariateFileNameBuilder.ClearExpireLogFile(System.String)">
            <summary>
            清理过期的日志文件
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.FileAppenderVariateFileNameBuilder.ValidatePath(System.String)">
            <summary>
            检查日志文件路径是否是有效路径[有效返回true;无效返回false]
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.FileAppenderVariateFileNameBuilder.CheckPath(System.String,System.DateTime@)">
            <summary>
            检查日志文件路径是否是有效路径[有效返回true;无效返回false]
            </summary>
            <param name="filePath"></param>
            <param name="createTime"></param>
            <returns></returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Appender.MailAppender">
            <summary>
            邮件日志输出追加器
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.MailAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.MailAppender.#ctor(UtilZ.DotnetStd.Ex.Log.Config.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.MailAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.MailAppender.PrimitiveWriteLog(UtilZ.DotnetStd.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Appender.RedirectAppender">
            <summary>
            重定向日志输出追加器
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.RedirectAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.RedirectAppender.#ctor(UtilZ.DotnetStd.Ex.Log.Config.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.RedirectAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="E:UtilZ.DotnetStd.Ex.Log.Appender.RedirectAppender.RedirectOuput">
            <summary>
            重定向输出事件
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.RedirectAppender.PrimitiveWriteLog(UtilZ.DotnetStd.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Appender.RedirectOuputArgs">
            <summary>
            重定向输出项
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.RedirectOuputArgs.#ctor(UtilZ.DotnetStd.Ex.Log.LogItem)">
            <summary>
            构造函数
            </summary>
            <param name="item">日志信息项</param>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Appender.RedirectOuputArgs.Item">
            <summary>
            日志信息项
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Appender.SystemLogAppender">
            <summary>
            操作系统日志输出追加器
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.SystemLogAppender.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.SystemLogAppender.#ctor(UtilZ.DotnetStd.Ex.Log.Config.BaseConfig)">
            <summary>
            构造函数
            </summary>
            <param name="config">配置对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.SystemLogAppender.CreateConfig(System.Xml.Linq.XElement)">
            <summary>
            创建配置对象实例
            </summary>
            <param name="ele">配置元素</param>
            <returns>配置对象实例</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appender.SystemLogAppender.PrimitiveWriteLog(UtilZ.DotnetStd.Ex.Log.LogItem)">
            <summary>
            写日志
            </summary>
            <param name="item">日志项</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appenders.AppendFile.ExclusiveFileLogWriter.WriteLog(UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig,UtilZ.DotnetStd.Ex.Log.Appender.FileAppenderPathManager,System.DateTime,UtilZ.DotnetStd.Ex.Log.LogMessageItem)">
            <summary>
            写日志
            </summary>
            <param name="fileAppenderConfig">配置</param>
            <param name="pathManager">路由管理器</param>
            <param name="createFilePathTime">创建时间</param>
            <param name="logMessage">日志信息项</param>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.Appenders.AppendFile.FileLogWriterBase._securityPolicy">
            <summary>
            日志安全策略
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appenders.AppendFile.FileLogWriterBase.WriteLog(UtilZ.DotnetStd.Ex.Log.LogMessageItem)">
            <summary>
            写日志
            </summary>
            <param name="logMessage">日志信息项</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appenders.AppendFile.FileLogWriterBase.WriteLog(UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig,UtilZ.DotnetStd.Ex.Log.Appender.FileAppenderPathManager,System.DateTime,UtilZ.DotnetStd.Ex.Log.LogMessageItem)">
            <summary>
            写日志
            </summary>
            <param name="fileAppenderConfig">配置</param>
            <param name="pathManager">路由管理器</param>
            <param name="createFilePathTime">创建时间</param>
            <param name="logMessage">日志信息项</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appenders.AppendFile.FileLogWriterBase.WriteLogToFile(UtilZ.DotnetStd.Ex.Log.LogMessageItem,System.IO.StreamWriter)">
            <summary>
            写日志到文件
            </summary>
            <param name="logMessage">日志信息项</param>
            <param name="sw">StreamWriter</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appenders.AppendFile.FileLogWriterBase.GetLogFilePath">
            <summary>
            获得日志文件路径
            </summary>
            <returns>日志文件路径</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appenders.AppendFile.InterProcessFileLogWriter.WriteLog(UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig,UtilZ.DotnetStd.Ex.Log.Appender.FileAppenderPathManager,System.DateTime,UtilZ.DotnetStd.Ex.Log.LogMessageItem)">
            <summary>
            写日志
            </summary>
            <param name="fileAppenderConfig">配置</param>
            <param name="pathManager">路由管理器</param>
            <param name="createFilePathTime">创建时间</param>
            <param name="logMessage">日志信息项</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appenders.AppendFile.InterProcessFileLogWriter.GetMutex(System.String)">
            <summary>
            获取进程锁
            </summary>
            <returns>进程锁</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appenders.AppendFile.InterProcessFileLogWriter.ReleaseMutex(System.Threading.Mutex)">
            <summary>
            释放进程锁
            </summary>
            <param name="mutex">进程锁</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Appenders.AppendFile.MinimalFileLogWriter.WriteLog(UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig,UtilZ.DotnetStd.Ex.Log.Appender.FileAppenderPathManager,System.DateTime,UtilZ.DotnetStd.Ex.Log.LogMessageItem)">
            <summary>
            写日志
            </summary>
            <param name="fileAppenderConfig">配置</param>
            <param name="pathManager">路由管理器</param>
            <param name="createFilePathTime">创建时间</param>
            <param name="logMessage">日志信息项</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.LogAsynQueue`1">
            <summary>
            日志志属异步队列
            </summary>
            <typeparam name="T">数据类型</typeparam>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogAsynQueue`1._thread">
            <summary>
            异步队列线程
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogAsynQueue`1._cts">
            <summary>
            线程取消通知对象
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogAsynQueue`1._queue">
            <summary>
            Queue
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogAsynQueue`1._autoResetEvent">
            <summary>
            空队列等待线程消息通知
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogAsynQueue`1._processAction">
            <summary>
            数据处理委托
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogAsynQueue`1._isDispose">
            <summary>
            是否已释放过资源[true:已释放过;false:未释放过]
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogAsynQueue`1.#ctor(System.Action{`0},System.String)">
            <summary>
            构造函数
            </summary>
            <param name="processAction">数据处理委托</param>
            <param name="threadName">异步队列线程名称</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogAsynQueue`1.LogThreadMethod">
            <summary>
            线程方法
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogAsynQueue`1.Enqueue(`0)">
            <summary>
            将对象添加到队列的结尾处
            </summary>
            <param name="item">待添加的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogAsynQueue`1.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.LogSysInnerLog">
            <summary>
            日志系统内部日志输出类
            </summary>
        </member>
        <member name="E:UtilZ.DotnetStd.Ex.Log.LogSysInnerLog.Log">
            <summary>
            内部日志事件
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogSysInnerLog.OnRaiseLog(System.Object,System.Exception)">
            <summary>
            触发内部日志事件
            </summary>
            <param name="sender">事件产生者</param>
            <param name="ex">异常</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.LogUtil">
            <summary>
            日志操作公共类
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogUtil._currentAssemblyDirectory">
            <summary>
            当前程序集所在目录
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogUtil.GetAttributeValue(System.Xml.Linq.XElement,System.String)">
            <summary>
            获取节点指定特性值
            </summary>
            <param name="ele"></param>
            <param name="attriName"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogUtil.GetChildXElementValue(System.Xml.Linq.XElement,System.String,System.String)">
            <summary>
            获取节点下指定名称子节点特性值
            </summary>
            <param name="ele"></param>
            <param name="childName"></param>
            <param name="attriName"></param>
            <returns></returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogUtil.GetType(System.String)">
            <summary>
            根据字符串信息获取程序集中的类型
            </summary>
            <param name="typeFullName">类型名称[格式:类型名,程序集命名.例如:Oracle.ManagedDataAccess.Client.OracleConnection,Oracle.ManagedDataAccess, Version=4.121.1.0, Culture=neutral, PublicKeyToken=89b483f429c47342]</param>
            <returns>实例</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogUtil.GetStackTrace(System.Int32)">
            <summary>
            获取指定层级调用堆栈(格式:[类全名.方法名].[类全名.方法名].xxx)
            </summary>
            <param name="stackCount">要获取的堆栈数</param>
            <returns>指定层级调用堆栈</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig">
            <summary>
            基础配置
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.AppenderName">
            <summary>
            日志追加器名称
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.Layout">
            <summary>
            日志布局[%d %l %e %c 堆栈:%s]
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.DateFormat">
            <summary>
            时间格式[yyyy-MM-dd HH:mm:ss]
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.LevelMap">
            <summary>
            日志级别名称映射[Info:信息;Warn:warning;...]
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.SeparatorCount">
            <summary>
            分隔线长度
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.EnableOutputCache">
            <summary>
            是否启用日志输出缓存[true:启用;false:禁用]
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.Enable">
            <summary>
            是否启用日志追加器
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.Levels">
            <summary>
            过滤日志级别
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.EventIdMin">
            <summary>
            事件ID最小值(包含该值,默认值为不限)
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.EventIdMax">
            <summary>
            事件ID最大值(包含该值,默认值为不限)
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.MatchString">
            <summary>
            消息匹配指定的字符串才被记录,为空或null不匹配(默认为null)
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.MatchExceptionType">
            <summary>
            要记录的异常的类型为指定类型或其子类才被记录,为null不匹配(默认为null)
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig._levelMapDic">
            <summary>
            日志级别名称映射字典集合
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Config.BaseConfig.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Config.ConsoleAppenderConfig">
            <summary>
            日志追加器配置
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Config.ConsoleAppenderConfig.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig">
            <summary>
            日志追加器配置
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig.Days">
            <summary>
            日志保留天数小于1表示永不清除
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig.MaxFileCount">
            <summary>
            最多产生的日志文件数，超过则只保留最新的n个,小于1为不限文件数
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig.MaxFileSize">
            <summary>
            日志文件上限大小,当文件超过此值则分隔成多个日志文件,小于1不限制,单位/KB
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig.MaxFileLength">
            <summary>
            获取日志单个文件最大大小,小于等于0不限制,单位/字节
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig.FilePath">
            <summary>
            日志存放路径
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig.IsAppend">
            <summary>
            是否追加日志
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig.SecurityPolicy">
            <summary>
            日志安全策略,该类型为实现接口ILogSecurityPolicy的子类,必须实现Encryption方法
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig.LockingModel">
            <summary>
            锁类模型[Exclusive,InterProcess,Minimal]
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Config.FileAppenderConfig.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Config.LockingModel">
            <summary>
            锁类模型
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.Config.LockingModel.Exclusive">
            <summary>
            独占
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.Config.LockingModel.InterProcess">
            <summary>
            相互写
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.Config.LockingModel.Minimal">
            <summary>
            最小,用完就关
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Config.RedirectAppendConfig">
            <summary>
            重定向输出日志追加器配置
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Config.RedirectAppendConfig.#ctor(System.Xml.Linq.XElement)">
            <summary>
            构造函数
            </summary>
            <param name="ele">配置元素</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.EmptyLoger">
            <summary>
            空日志记录器,不作任何输出
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.EmptyLoger.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.EmptyLoger.ObjectAddLog(UtilZ.DotnetStd.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            静态方法添加日志的方法
            </summary>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.EmptyLoger.PrimitiveAddLog(System.Int32,UtilZ.DotnetStd.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            实例添加日志
            </summary>
            <param name="skipFrames"></param>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.ILoger">
            <summary>
            日志接口
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.ILoger.Name">
            <summary>
            日志记录器名称
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.ILoger.Level">
            <summary>
            获取日志级别
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.ILoger.Enable">
            <summary>
            是否启用日志追加器
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.AddAppender(UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase)">
            <summary>
            添加日志追加器
            </summary>
            <param name="appender">日志追加器</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.GetAppenderByName(System.String)">
            <summary>
            根据日志追加器名称获取日志追加器
            </summary>
            <param name="appenderName">日志追加器名称</param>
            <returns>日志追加器</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.GetAppenders">
            <summary>
            获取日志追加器
            </summary>
            <returns>日志追加器数组</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Trace(System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Trace(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Trace(System.Exception,System.Int32,System.Object)">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Trace(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Debug(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Debug(System.Exception,System.Int32,System.Object)">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Debug(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Info(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Info(System.Exception,System.Int32,System.Object)">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Info(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Warn(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Warn(System.Exception,System.Int32,System.Object)">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Warn(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Error(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Error(System.Exception,System.Int32,System.Object)">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Error(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Fatal(System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Fatal(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Fatal(System.Exception,System.Int32,System.Object)">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILoger.Fatal(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.Loger">
            <summary>
            日志记录器
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.Loger._logerDic">
            <summary>
            [key:LogerName;Value:Loger]
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.#cctor">
            <summary>
            静态构造函数(初始化默认日志追加器)
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Clear">
            <summary>
            清空所有配置,包括默认
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.LoadConfig(System.String)">
            <summary>
            加载配置,加载前清空旧的配置
            </summary>
            <param name="configFilePath">配置文件路径</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.PrimitiveLoadConfig(System.Xml.Linq.XDocument)">
            <summary>
            加载配置,加载前清空旧的配置
            </summary>
            <param name="xdoc">配置文件XDocument</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.GetAppenderByName(System.String,System.String)">
            <summary>
            根据日志追加器名称获取指定日志记录器中的日志追加器
            </summary>
            <param name="logerName">日志记录器名称</param>
            <param name="appenderName">日志追加器名称</param>
            <returns>日志追加器</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.GetAppenders(System.String)">
            <summary>
            获取指定日志记录器中的日志追加器
            </summary>
            <param name="logerName">日志记录器名称</param>
            <returns>日志追加器数组</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.GetLoger(System.String)">
            <summary>
            获取日志记录器,如果日志记录器成功返回配置的日志记录器,如果不存在返回空日志记录器
            </summary>
            <param name="logerName">日志记录器名称</param>
            <returns>日志记录器</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.AddLoger(UtilZ.DotnetStd.Ex.Log.ILoger)">
            <summary>
            添加日志记录器
            </summary>
            <param name="loger">日志记录器</param>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.Loger._logDispatcherQueue">
            <summary>
            日志分发线程队列
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.ObjectAddLog(UtilZ.DotnetStd.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            静态方法添加日志的方法
            </summary>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.PrimitiveAddLog(System.Int32,UtilZ.DotnetStd.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            实例添加日志
            </summary>
            <param name="skipFrames"></param>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDisposing">是否释放标识</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Trace(System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Trace(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Trace(System.Exception,System.Int32,System.Object)">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Trace(System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Trace(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Debug(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Debug(System.Exception,System.Int32,System.Object)">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Debug(System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Debug(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Info(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Info(System.Exception,System.Int32,System.Object)">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Info(System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Info(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Warn(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Warn(System.Exception,System.Int32,System.Object)">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Warn(System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Warn(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Error(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Error(System.Exception,System.Int32,System.Object)">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Error(System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Error(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Fatal(System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Fatal(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Fatal(System.Exception,System.Int32,System.Object)">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.Loger.Fatal(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.LogerBase">
            <summary>
            日志记录器基类
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogerBase._appenders">
            <summary>
            日志追加器集合
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogerBase._appendersLock">
            <summary>
            日志追加器集合线程锁
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogerBase.Name">
            <summary>
            获取日志记录器名称
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogerBase.Level">
            <summary>
            获取获取日志级别
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogerBase.Enable">
            <summary>
            是否启用日志追加器
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#AddAppender(UtilZ.DotnetStd.Ex.Log.Appender.AppenderBase)">
            <summary>
            添加日志追加器
            </summary>
            <param name="appender">日志追加器</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#GetAppenderByName(System.String)">
            <summary>
            根据日志追加器名称获取日志追加器
            </summary>
            <param name="appenderName">日志追加器名称</param>
            <returns>日志追加器</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#GetAppenders">
            <summary>
            获取日志追加器
            </summary>
            <returns>日志追加器数组</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.InsAddLog(UtilZ.DotnetStd.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            实例添加日志
            </summary>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.ObjectAddLog(UtilZ.DotnetStd.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            静态方法添加日志的方法
            </summary>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.PrimitiveAddLog(System.Int32,UtilZ.DotnetStd.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            实例添加日志
            </summary>
            <param name="skipFrames"></param>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常</param>
            <param name="msg">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Trace(System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Trace(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Trace(System.Exception,System.Int32,System.Object)">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Trace(System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Trace(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            追踪
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Debug(System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Debug(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Debug(System.Exception,System.Int32,System.Object)">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Debug(System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Debug(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            调试
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Info(System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Info(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Info(System.Exception,System.Int32,System.Object)">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Info(System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Info(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            信息
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Warn(System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Warn(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Warn(System.Exception,System.Int32,System.Object)">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Warn(System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Warn(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            警告
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常警告</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Error(System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Error(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Error(System.Exception,System.Int32,System.Object)">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Error(System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Error(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            错误
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常错误</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Fatal(System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Fatal(System.Int32,System.Object,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Fatal(System.Exception,System.Int32,System.Object)">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Fatal(System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.UtilZ#DotnetStd#Ex#Log#ILoger#Fatal(System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            致命
            </summary>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常致命</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogerBase.Dispose(System.Boolean)">
            <summary>
            释放资源方法
            </summary>
            <param name="isDisposing">是否释放标识</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.InnerLogOutputArgs">
            <summary>
            内部日志输出事件参数
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.InnerLogOutputArgs.#ctor(System.Exception)">
            <summary>
            构造函数
            </summary>
            <param name="ex">异常</param>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.InnerLogOutputArgs.Ex">
            <summary>
            异常
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.LogConstant">
            <summary>
            日志常量
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogConstant.CurrentAssemblyDirectory">
            <summary>
            获取当前应用程序所在根目录
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.DEFAULT_EVENT_ID">
            <summary>
            默认事件ID
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.TRACESTR">
            <summary>
            追踪
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.DEBUGSTR">
            <summary>
            调试
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.INFOSTR">
            <summary>
            信息
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.WARNSTR">
            <summary>
            警告
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.ERRORSTR">
            <summary>
            错误
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.FATALSTR">
            <summary>
            致命
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.LOGEXTENSION">
            <summary>
            日志文件扩展名
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.LOGDATAFORMAT">
            <summary>
            日志日期格式
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.DateTimeFormat">
            <summary>
            日期格式字符串
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.WAITREPEATTIME">
            <summary>
            等待重试时间,毫秒
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogConstant.GetLogLevelName(UtilZ.DotnetStd.Ex.Log.LogLevel)">
            <summary>
            获取日志等级名称
            </summary>
            <param name="level">日志级别</param>
            <returns>日志标题</returns>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.DEFAULT_CONFIG_FILE_NAME">
            <summary>
            默认配置文件名称
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.LOGCONFIG_ROOT_ELEMENT_NAME">
            <summary>
            日志配置根节点名称
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.LOGCONFIG_LOGER_ELEMENT_NAME">
            <summary>
            日志记录器配置节点名称
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.PATTERN_FALG_CHAR">
            <summary>
            通配符
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.FILE_APPENDER_PATTERN_BREIF">
            <summary>
            File
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.REDIRECT_APPENDER_PATTERN_BREIF">
            <summary>
            Redirect
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.CONSOLE_APPENDER_PATTERN_BREIF">
            <summary>
            Console
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.DATABASE_APPENDER_PATTERN_BREIF">
            <summary>
            Database
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.MAIL_APPENDER_PATTERN_BREIF">
            <summary>
            Mail
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.SYSTEM_APPENDER_PATTERN_BREIF">
            <summary>
            System
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.TIME">
            <summary>
            时间
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.LEVEL">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.EVENT">
            <summary>
            事件ID
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.TAG">
            <summary>
            与对象关联的用户定义数据
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.THREAD">
            <summary>
            线程ID
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.CONTENT">
            <summary>
            内容
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogConstant.STACKTRACE">
            <summary>
            堆栈
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.LogItem">
            <summary>
            日志信息类
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogItem.#ctor(System.DateTime,System.Threading.Thread,System.Int32,System.Boolean,System.String,UtilZ.DotnetStd.Ex.Log.LogLevel,System.Int32,System.Object,System.Exception,System.String,System.Object[])">
            <summary>
            构造函数
            </summary>
            <param name="time">时间</param>
            <param name="thread">线程</param>
            <param name="skipFrames">调用堆栈跳过帧数</param>
            <param name="getStackTraceMethodParameterNameType">获取堆栈方法参数名称类型</param>
            <param name="logerName">日志记录器名称</param>
            <param name="level">日志级别</param>
            <param name="eventId">事件ID</param>
            <param name="tag">与对象关联的用户定义数据</param>
            <param name="ex">异常信息</param>
            <param name="format">复合格式字符串,参数为空或null表示无格式化</param>
            <param name="args">一个对象数组，其中包含零个或多个要设置格式的对象</param>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogItem._getStackTraceMethodParameterNameType">
            <summary>
            获取堆栈方法参数名称类型[true:代码方式false:系统堆栈方式(eg:List`string),默认为true]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogItem._isAnalyzed">
            <summary>
            日志项是否已分析过
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.ID">
            <summary>
            主键
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.Time">
            <summary>
            时间
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.ThreadID">
            <summary>
            线程ID
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.ThreadName">
            <summary>
            线程名称
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.LogerName">
            <summary>
            日志记录器名称
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.EventID">
            <summary>
            事件ID
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.Tag">
            <summary>
            与对象关联的用户定义数据
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.StackTrace">
            <summary>
            调用堆栈跟踪信息
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.Format">
            <summary>
            复合格式字符串,参数为空或null表示无格式化
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.Args">
            <summary>
            一个对象数组，其中包含零个或多个要设置格式的对象
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.Logger">
            <summary>
            日志产生类名称
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.StackTraceInfo">
            <summary>
            堆栈信息
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogItem.Content">
            <summary>
            日志内容
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogItem.MethodParameterTypeParameterNameSpacing">
            <summary>
            方法参数类型与参数名之间的间隔
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogItem.MethodParameterSpacing">
            <summary>
            方法参数之间的间隔
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogItem.LogProcess">
            <summary>
            日志处理
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogItem.GetStackTraceInfo">
            <summary>
            获取堆栈信息字符串
            </summary>
            <returns>堆栈信息字符串</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogItem.GetMethodParamtersString(System.Reflection.ParameterInfo[])">
            <summary>
            获得方法参数字符串
            </summary>
            <param name="parameters">参数数组</param>
            <returns>方法参数字符串</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogItem.AppendGenericArgumentType(System.Text.StringBuilder,System.Type)">
            <summary>
            追加泛型类型参数类型名称
            </summary>
            <param name="sbParameter">参数StringBuilder</param>
            <param name="parameterType">参数类型</param>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogItem.GetTypeNameStr(System.Type)">
            <summary>
            获取类型名称字符串
            </summary>
            <param name="type">类型</param>
            <returns>类型名称字符串</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogItem.ToString">
            <summary>
            重写ToString
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogLevel.Trace">
            <summary>
            追踪[1]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogLevel.Debug">
            <summary>
            调试[2]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogLevel.Info">
            <summary>
            提示[4]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogLevel.Warn">
            <summary>
            警告[8]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogLevel.Error">
            <summary>
            错误[16]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogLevel.Fatal">
            <summary>
            致命[32]
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.LogLevel.Off">
            <summary>
            关闭[100]
            </summary>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.LogMessageItem">
            <summary>
            日志消息项
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogMessageItem.LogerName">
            <summary>
            日志记录器名称
            </summary>
        </member>
        <member name="P:UtilZ.DotnetStd.Ex.Log.LogMessageItem.LogMsg">
            <summary>
            日志信息
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.LogMessageItem.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="logerName">日志记录器名称</param>
            <param name="logMsg">日志信息</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.ILogSecurityPolicy">
            <summary>
            日志安全策略接口
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILogSecurityPolicy.Encryption(System.String)">
            <summary>
            加密日志消息
            </summary>
            <param name="logMsg">日志消息</param>
            <returns>加密后的日志消息</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILogSecurityPolicy.Decryption(System.String)">
            <summary>
            解密日志消息
            </summary>
            <param name="logMsg">日志消息</param>
            <returns>解密后的日志消息</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.ILogSecurityPolicy.Decryption(System.String,System.String)">
            <summary>
            解密日志
            </summary>
            <param name="srcLogFilePath">加密的日志文件路径</param>
            <param name="targetLogFilePath">解密后的日志文件路径</param>
        </member>
        <member name="T:UtilZ.DotnetStd.Ex.Log.XSecurityPolicy">
            <summary>
            X日志安全策略类
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.XSecurityPolicy._encrKey">
            <summary>
            加密key
            </summary>
        </member>
        <member name="F:UtilZ.DotnetStd.Ex.Log.XSecurityPolicy._rgbIV">
            <summary>
            对称加密初始化向量
            </summary>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.XSecurityPolicy.Encryption(System.String)">
            <summary>
            加密日志消息
            </summary>
            <param name="logMsg">日志消息</param>
            <returns>加密后的日志消息</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.XSecurityPolicy.Decryption(System.String)">
            <summary>
            解密日志消息
            </summary>
            <param name="logMsg">日志消息</param>
            <returns>解密后的日志消息</returns>
        </member>
        <member name="M:UtilZ.DotnetStd.Ex.Log.XSecurityPolicy.Decryption(System.String,System.String)">
            <summary>
            解密日志
            </summary>
            <param name="srcLogFilePath">加密的日志文件路径</param>
            <param name="targetLogFilePath">解密后的日志文件路径</param>
        </member>
    </members>
</doc>
